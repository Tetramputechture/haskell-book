
==================== FINAL INTERFACE ====================
2019-07-21 21:19:49.279795497 UTC

interface addition-0.1.0.0-Isu6SWsVkOo5ljPO0Uf38Y:Exercises 8065
  interface hash: b26cc126e9df44c9ef14daab9d3797ce
  ABI hash: 469a690eca5763908fa7fa295f98776c
  export-list hash: 9fba2dd0016617c8b9234c7818bee4cd
  orphan hash: 5eea16adb8c696c55eec0424bd034cde
  flag hash: 81c54bb85303292c9c9c961f73569c7b
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Exercises.capitalizeWord
  Exercises.fourTimes
  Exercises.genFool
  Exercises.genFool'
  Exercises.prop_capitalizeIdempotent
  Exercises.prop_composition
  Exercises.prop_dollar
  Exercises.prop_sortIdempotent
  Exercises.runSpecs
  Exercises.testGen
  Exercises.twice
  Exercises.Fool{Exercises.Frue Exercises.Fulse}
module dependencies: Hangman
package dependencies: QuickCheck-2.12.6.1 array-0.5.3.0
                      base-4.12.0.0* containers-0.6.0.1 deepseq-1.4.4.0 erf-2.0.0.0
                      ghc-boot-th-8.6.5 ghc-prim-0.5.3 integer-gmp-1.0.2.0 pretty-1.1.3.6
                      primitive-0.6.4.0 random-1.1 template-haskell-2.14.0.0
                      tf-random-0.5 time-1.8.0.2 transformers-0.5.6.2
orphans: transformers-0.5.6.2:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal
                         ghc-boot-th-8.6.5:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.5:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.12.6.1:Test.QuickCheck 22e1902781d29820fc86864e7e5b6791
import  -/  QuickCheck-2.12.6.1:Test.QuickCheck.Arbitrary 680caa283d6f5fee1c08f7aa6a51e8be
import  -/  QuickCheck-2.12.6.1:Test.QuickCheck.Gen cc8ef82ad73b94cee8b3647cb0a81f7f
import  -/  QuickCheck-2.12.6.1:Test.QuickCheck.Test ccd615c8093d1dbc1037d3e74f5aac35
import  -/  Hangman e2b1cc2968d060f10a7f50a9aca2dc8d
  exports: 394e0e58ded8254e1f4c0cb0619e3537
import  -/  base-4.12.0.0:Data.Char 74f67fe9150a102afa18766e840f6832
import  -/  base-4.12.0.0:Data.List 17d0c71c557e42abe196f130788fd997
import  -/  base-4.12.0.0:Data.OldList e931cf456dc87f11ee6e6fb153bca23e
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:GHC.Unicode 87726eb81a3f9c9b22160a0afd5dc56a
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
06023c0c45c85a67cc98fc57774f5be0
  $fArbitraryFool ::
    Test.QuickCheck.Arbitrary.Arbitrary Exercises.Fool
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Exercises.Fool
                  Exercises.genFool'
                  Exercises.$fArbitraryFool_$cshrink -}
06023c0c45c85a67cc98fc57774f5be0
  $fArbitraryFool_$cshrink :: Exercises.Fool -> [Exercises.Fool]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Exercises.Fool) -> GHC.Types.[] @ Exercises.Fool) -}
06023c0c45c85a67cc98fc57774f5be0
  $fEqFool :: GHC.Classes.Eq Exercises.Fool
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Exercises.Fool Exercises.$fEqFool_$c== Exercises.$fEqFool_$c/= -}
06023c0c45c85a67cc98fc57774f5be0
  $fEqFool_$c/= :: Exercises.Fool -> Exercises.Fool -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Exercises.Fool) (y :: Exercises.Fool) ->
                 case x of wild {
                   Exercises.Fulse
                   -> case y of wild1 {
                        Exercises.Fulse -> GHC.Types.False
                        Exercises.Frue -> GHC.Types.True }
                   Exercises.Frue
                   -> case y of wild1 {
                        Exercises.Fulse -> GHC.Types.True
                        Exercises.Frue -> GHC.Types.False } }) -}
06023c0c45c85a67cc98fc57774f5be0
  $fEqFool_$c== :: Exercises.Fool -> Exercises.Fool -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Exercises.Fool) (ds1 :: Exercises.Fool) ->
                 case ds of wild {
                   Exercises.Fulse
                   -> case ds1 of wild1 {
                        Exercises.Fulse -> GHC.Types.True
                        Exercises.Frue -> GHC.Types.False }
                   Exercises.Frue
                   -> case ds1 of wild1 {
                        Exercises.Fulse -> GHC.Types.False
                        Exercises.Frue -> GHC.Types.True } }) -}
06023c0c45c85a67cc98fc57774f5be0
  $fShowFool :: GHC.Show.Show Exercises.Fool
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Exercises.Fool
                  Exercises.$fShowFool_$cshowsPrec
                  Exercises.$fShowFool_$cshow
                  Exercises.$fShowFool_$cshowList -}
06023c0c45c85a67cc98fc57774f5be0
  $fShowFool1 :: Exercises.Fool -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Exercises.Fool) (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Exercises.Fulse
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Exercises.$fShowFool4)
                        eta
                   Exercises.Frue
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Exercises.$fShowFool2)
                        eta }) -}
131d4038f3f236ca5317db4a49dbb8a3
  $fShowFool2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Exercises.$fShowFool3) -}
8cea50847cf077ede83b72132199150f
  $fShowFool3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Frue"#) -}
0c1b4a1b0c96695d5a49e8ceccb47632
  $fShowFool4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Exercises.$fShowFool5) -}
b66e8844f2add70b0ec5d48f2897f66f
  $fShowFool5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Fulse"#) -}
06023c0c45c85a67cc98fc57774f5be0
  $fShowFool_$cshow :: Exercises.Fool -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Exercises.Fool) ->
                 case x of wild {
                   Exercises.Fulse -> Exercises.$fShowFool4
                   Exercises.Frue -> Exercises.$fShowFool2 }) -}
06023c0c45c85a67cc98fc57774f5be0
  $fShowFool_$cshowList :: [Exercises.Fool] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Exercises.Fool]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Exercises.Fool Exercises.$fShowFool1 ls s) -}
06023c0c45c85a67cc98fc57774f5be0
  $fShowFool_$cshowsPrec ::
    GHC.Types.Int -> Exercises.Fool -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Exercises.Fool)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Exercises.Fulse
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Exercises.$fShowFool4)
                        eta
                   Exercises.Frue
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Exercises.$fShowFool2)
                        eta }) -}
df84954a5222bba61c1632bc7a8791fd
  $s$fArbitrary[] ::
    Test.QuickCheck.Arbitrary.Arbitrary [GHC.Types.Int]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [GHC.Types.Int]
                  (Test.QuickCheck.Arbitrary.$fArbitrarySet2
                     @ GHC.Types.Int
                     Test.QuickCheck.Arbitrary.$fArbitraryInt)
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <[GHC.Types.Int]>_R))
                  (\ (eta :: [GHC.Types.Int]) ->
                   Test.QuickCheck.Arbitrary.shrinkList
                     @ GHC.Types.Int
                     Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sshrinkIntegral
                     eta) -}
bcafa6d12bebba22a7fc0af5ba54f5c5
  $s$fArbitrary[]1 ::
    Test.QuickCheck.Arbitrary.Arbitrary [GHC.Types.Char]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [GHC.Types.Char]
                  (Test.QuickCheck.Arbitrary.$fArbitrarySet2
                     @ GHC.Types.Char
                     Test.QuickCheck.Arbitrary.$fArbitraryChar)
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <[GHC.Types.Char]>_R))
                  (\ (eta :: [GHC.Types.Char]) ->
                   Test.QuickCheck.Arbitrary.shrinkList
                     @ GHC.Types.Char
                     Test.QuickCheck.Arbitrary.$fArbitraryChar_$cshrink
                     eta) -}
a4f62e822815e41afedd9d304c71f001
  $tc'Frue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5594852527471106010##
                   6571984883508489638##
                   Exercises.$trModule
                   Exercises.$tc'Frue2
                   0#
                   Exercises.$tc'Frue1) -}
3a5212943de50c858adcb16fc8c14cbd
  $tc'Frue1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
b6c6ca6ed3b30cbe029baf7863e412bc
  $tc'Frue2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Exercises.$tc'Frue3) -}
d8e0d7601f0665b8895ec289d0258450
  $tc'Frue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Frue"#) -}
a6ee27eb0feb60c554b88b176839455e
  $tc'Fulse :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4835527706638727374##
                   13472446994929500088##
                   Exercises.$trModule
                   Exercises.$tc'Fulse1
                   0#
                   Exercises.$tc'Frue1) -}
123cc46b919bd3b6017acf9a372005f4
  $tc'Fulse1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Exercises.$tc'Fulse2) -}
b8525bac492d03d5e2eb2ae62366e926
  $tc'Fulse2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Fulse"#) -}
10a08664a9dbd515a7b145587af8cc9d
  $tcFool :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17924223734245947822##
                   8099031285298940963##
                   Exercises.$trModule
                   Exercises.$tcFool1
                   0#
                   GHC.Types.krep$*) -}
5f75a470e99cf328207fd63d488a9d92
  $tcFool1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Exercises.$tcFool2) -}
d41fa570c922f4479288835924d0e610
  $tcFool2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Fool"#) -}
4e5cf8dbf17fccebe4153e5e9524819b
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Exercises.$trModule3
                   Exercises.$trModule1) -}
5f73ef5226330ad69e380f523ed9ee87
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Exercises.$trModule2) -}
c0bad558872419ca784a2b5bc938ffd9
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Exercises"#) -}
2958f577458dd786c40151b82f81360a
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Exercises.$trModule4) -}
0a5cd5f2641402c2b2f91ff49eb71d16
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("addition-0.1.0.0-Isu6SWsVkOo5ljPO0Uf38Y"#) -}
93a7e3396f54fd0a2ac39928f02a35ed
  $wlvl1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ [GHC.Types.Char]
                   @ GHC.Types.Bool
                   Exercises.$s$fArbitrary[]1
                   GHC.Show.$fShow[]_$s$fShow[]1
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Exercises.prop_capitalizeIdempotent
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
f60b9dccb23dd1d1f3fe1d8bd939e76d
  $wlvl128 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ [GHC.Types.Int]
                   @ GHC.Types.Bool
                   Exercises.$s$fArbitrary[]
                   GHC.Show.$fShow[]_$s$fShow[]
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Exercises.prop_sortIdempotent_$sprop_sortIdempotent
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
4853bd98ff6021d59ec8938eb1515bba
  $wlvl2 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ GHC.Types.Int
                   @ GHC.Types.Bool
                   Test.QuickCheck.Arbitrary.$fArbitraryInt
                   GHC.Show.$fShowInt
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Exercises.runSpecs8
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
92b89185e5876c90c6d76b566573eceb
  $wprop_composition ::
    (c -> c -> GHC.Types.Bool)
    -> (b -> c) -> (a -> b) -> a -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,C(U)><L,C(U)><L,U>,
     Inline: [2],
     Unfolding: (\ @ c
                   @ b
                   @ a
                   (ww :: c -> c -> GHC.Types.Bool)
                   (w :: b -> c)
                   (w1 :: a -> b)
                   (w2 :: a) ->
                 ww (w (w1 w2)) (w (w1 w2))) -}
06023c0c45c85a67cc98fc57774f5be0
  data Fool = Fulse | Frue
0057afbdd163d4d7f48fddc43ac43e3b
  capitalizeWord :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: [GHC.Types.Char]) ->
                 case ds of wild {
                   [] -> GHC.Types.[] @ GHC.Types.Char
                   : x xs
                   -> GHC.Types.: @ GHC.Types.Char (GHC.Unicode.toUpper x) xs }) -}
7363d4a2373b3232da85936daa8222b3
  fourTimes :: (b -> b) -> b -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),C(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b (x :: b -> b) (eta :: b) -> x (x (x (x eta)))) -}
a31f4e5f14d0c244fcb71a7aa4eef6ed
  genFool :: Test.QuickCheck.Gen.Gen Exercises.Fool
  {- Unfolding: (Test.QuickCheck.Gen.oneof
                   @ Exercises.Fool
                   Exercises.genFool1) -}
06023c0c45c85a67cc98fc57774f5be0
  genFool' :: Test.QuickCheck.Gen.Gen Exercises.Fool
  {- Unfolding: (Test.QuickCheck.Gen.frequency
                   @ Exercises.Fool
                   Exercises.genFool'1) -}
06023c0c45c85a67cc98fc57774f5be0
  genFool'1 ::
    [(GHC.Types.Int, Test.QuickCheck.Gen.Gen Exercises.Fool)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen Exercises.Fool)
                   Exercises.genFool'6
                   Exercises.genFool'2) -}
06023c0c45c85a67cc98fc57774f5be0
  genFool'2 ::
    [(GHC.Types.Int, Test.QuickCheck.Gen.Gen Exercises.Fool)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen Exercises.Fool)
                   Exercises.genFool'3
                   (GHC.Types.[]
                      @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen Exercises.Fool))) -}
06023c0c45c85a67cc98fc57774f5be0
  genFool'3 ::
    (GHC.Types.Int, Test.QuickCheck.Gen.Gen Exercises.Fool)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Exercises.genFool'5,
                  Exercises.genFool'4
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Exercises.Fool>_R)))) -}
06023c0c45c85a67cc98fc57774f5be0
  genFool'4 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Exercises.Fool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: (\ (ds :: Test.QuickCheck.Random.QCGen)
                   (ds1 :: GHC.Types.Int) ->
                 Exercises.Frue) -}
a1deaa61665c8153a5ca93d6f0a24490
  genFool'5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
06023c0c45c85a67cc98fc57774f5be0
  genFool'6 ::
    (GHC.Types.Int, Test.QuickCheck.Gen.Gen Exercises.Fool)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Exercises.genFool'8,
                  Exercises.genFool'7
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Exercises.Fool>_R)))) -}
06023c0c45c85a67cc98fc57774f5be0
  genFool'7 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Exercises.Fool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: (\ (ds :: Test.QuickCheck.Random.QCGen)
                   (ds1 :: GHC.Types.Int) ->
                 Exercises.Fulse) -}
d88944f488022781bffc154f9039343d
  genFool'8 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
88c4dff2151f13c54db5d44bf1e683f0
  genFool1 :: [Test.QuickCheck.Gen.Gen Exercises.Fool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Test.QuickCheck.Gen.Gen Exercises.Fool)
                   Exercises.genFool'7
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <Exercises.Fool>_R))
                   Exercises.genFool2) -}
d12a974a49c9e70336442db241cc7208
  genFool2 :: [Test.QuickCheck.Gen.Gen Exercises.Fool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Test.QuickCheck.Gen.Gen Exercises.Fool)
                   Exercises.genFool'4
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <Exercises.Fool>_R))
                   (GHC.Types.[] @ (Test.QuickCheck.Gen.Gen Exercises.Fool))) -}
907288ba4f0c6b8233ef31c30ba42de3
  prop_capitalizeIdempotent :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U> -}
bb88dd0f5581acf35ccdca39f2171ce5
  prop_composition ::
    GHC.Classes.Eq c => (b -> c) -> (a -> b) -> a -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,C(U)><L,C(U)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ @ c
                   @ b
                   @ a
                   (w :: GHC.Classes.Eq c)
                   (w1 :: b -> c)
                   (w2 :: a -> b)
                   (w3 :: a) ->
                 case w of ww { GHC.Classes.C:Eq ww1 ww2 ->
                 Exercises.$wprop_composition @ c @ b @ a ww1 w1 w2 w3 }) -}
7a4f7f2e7bf31d922fd924810102b36a
  prop_dollar :: GHC.Classes.Eq b => (a -> b) -> a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,C(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ b @ a ($dEq :: GHC.Classes.Eq b) (f :: a -> b) (x :: a) ->
                 GHC.Classes.== @ b $dEq (f x) (f x)) -}
2875a547813d416068e143c0a4ba1e12
  prop_sortIdempotent :: GHC.Classes.Ord a => [a] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(1*U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><S,U>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) (eta :: [a]) ->
                 let {
                   $dEq :: GHC.Classes.Eq a = GHC.Classes.$p1Ord @ a $dOrd
                 } in
                 case GHC.Classes.$fEq[]_$c==
                        @ a
                        $dEq
                        (Data.OldList.sortBy @ a (GHC.Classes.compare @ a $dOrd) eta)
                        (Data.OldList.sortBy
                           @ a
                           (GHC.Classes.compare @ a $dOrd)
                           (Data.OldList.sortBy
                              @ a
                              (GHC.Classes.compare @ a $dOrd)
                              eta)) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> GHC.Classes.$fEq[]_$c==
                        @ a
                        $dEq
                        (Data.OldList.sortBy @ a (GHC.Classes.compare @ a $dOrd) eta)
                        (Data.OldList.sortBy
                           @ a
                           (GHC.Classes.compare @ a $dOrd)
                           (Data.OldList.sortBy
                              @ a
                              (GHC.Classes.compare @ a $dOrd)
                              (Data.OldList.sortBy
                                 @ a
                                 (GHC.Classes.compare @ a $dOrd)
                                 (Data.OldList.sortBy
                                    @ a
                                    (GHC.Classes.compare @ a $dOrd)
                                    eta)))) }) -}
661ac1d2af669e5d3d95036f7af0dc14
  prop_sortIdempotent_$sprop_sortIdempotent ::
    [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (eta :: [GHC.Types.Int]) ->
                 case GHC.Classes.$fEq[]_$s$c==
                        (Data.OldList.sortBy @ GHC.Types.Int GHC.Classes.compareInt eta)
                        (Data.OldList.sortBy
                           @ GHC.Types.Int
                           GHC.Classes.compareInt
                           (Data.OldList.sortBy
                              @ GHC.Types.Int
                              GHC.Classes.compareInt
                              eta)) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> GHC.Classes.$fEq[]_$s$c==
                        (Data.OldList.sortBy @ GHC.Types.Int GHC.Classes.compareInt eta)
                        (Data.OldList.sortBy
                           @ GHC.Types.Int
                           GHC.Classes.compareInt
                           (Data.OldList.sortBy
                              @ GHC.Types.Int
                              GHC.Classes.compareInt
                              (Data.OldList.sortBy
                                 @ GHC.Types.Int
                                 GHC.Classes.compareInt
                                 (Data.OldList.sortBy
                                    @ GHC.Types.Int
                                    GHC.Classes.compareInt
                                    eta)))) }) -}
7c2309f238b092578fa9fec0485e4d9d
  runSpecs :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Exercises.runSpecs1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
27426b0dae8d35f6f319fe23369c569c
  runSpecs1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Test.QuickCheck.Test.$wwithState
                        @ Test.QuickCheck.Test.Result
                        (GHC.Maybe.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.quickCheck5
                        Test.QuickCheck.Test.quickCheck4
                        Test.QuickCheck.Test.quickCheck5
                        GHC.Types.True
                        GHC.Base.maxInt
                        Exercises.runSpecs6
                          `cast`
                        (<Test.QuickCheck.State.State>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.QuickCheck.Test.Result>_R))
                        s of ds3 { (#,#) ipv ipv1 ->
                 case Test.QuickCheck.Test.$wwithState
                        @ Test.QuickCheck.Test.Result
                        (GHC.Maybe.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.quickCheck5
                        Test.QuickCheck.Test.quickCheck4
                        Test.QuickCheck.Test.quickCheck5
                        GHC.Types.True
                        GHC.Base.maxInt
                        Exercises.runSpecs6
                          `cast`
                        (<Test.QuickCheck.State.State>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.QuickCheck.Test.Result>_R))
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 case Test.QuickCheck.Test.$wwithState
                        @ Test.QuickCheck.Test.Result
                        (GHC.Maybe.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.quickCheck5
                        Test.QuickCheck.Test.quickCheck4
                        Test.QuickCheck.Test.quickCheck5
                        GHC.Types.True
                        GHC.Base.maxInt
                        Exercises.runSpecs4
                          `cast`
                        (<Test.QuickCheck.State.State>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.QuickCheck.Test.Result>_R))
                        ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                 case Test.QuickCheck.Test.$wwithState
                        @ Test.QuickCheck.Test.Result
                        (GHC.Maybe.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.quickCheck5
                        Test.QuickCheck.Test.quickCheck4
                        Test.QuickCheck.Test.quickCheck5
                        GHC.Types.True
                        GHC.Base.maxInt
                        Exercises.runSpecs2
                          `cast`
                        (<Test.QuickCheck.State.State>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.QuickCheck.Test.Result>_R))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 (# ipv6, GHC.Tuple.() #) } } } }) -}
fa55f84885168aeb467b89e40137436b
  runSpecs2 ::
    Test.QuickCheck.State.State
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Test.QuickCheck.Test.Result #)
  {- Arity: 2,
     Strictness: <S(S(LS(S)LC(C(S(SL))))S(S)LLLLSLLSSSSSSLLL),1*U(U(U(U),U(U),U,U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U(U,U,U,U,U,U),U,U,U)><S,U>,
     Unfolding: (\ (s1 :: Test.QuickCheck.State.State)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Test.QuickCheck.Test.quickCheck2
                   s1
                   Exercises.runSpecs3
                     `cast`
                   (Nth:3
                        (<[GHC.Types.Int] -> GHC.Types.Bool>_R
                         ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                       (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])))
                   eta) -}
bb358409476159312337b6e654cb8946
  runSpecs3 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Exercises.$wlvl128 ww1 ww2 ww3 ww4 w1 }) -}
c521fabc369f21b79d4a9ae2955ca788
  runSpecs4 ::
    Test.QuickCheck.State.State
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Test.QuickCheck.Test.Result #)
  {- Arity: 2,
     Strictness: <S(S(LS(S)LC(C(S(SL))))S(S)LLLLSLLSSSSSSLLL),1*U(U(U(U),U(U),U,U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U(U,U,U,U,U,U),U,U,U)><S,U>,
     Unfolding: (\ (s1 :: Test.QuickCheck.State.State)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Test.QuickCheck.Test.quickCheck2
                   s1
                   Exercises.runSpecs5
                     `cast`
                   (Nth:3
                        (<[GHC.Types.Char] -> GHC.Types.Bool>_R
                         ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                       (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])))
                   eta) -}
850a048d7a742f829e9fbf05a94c8afb
  runSpecs5 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Exercises.$wlvl1 ww1 ww2 ww3 ww4 w1 }) -}
55d83ef6e6e76d2a09d8ddb707a01887
  runSpecs6 ::
    Test.QuickCheck.State.State
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Test.QuickCheck.Test.Result #)
  {- Arity: 2,
     Strictness: <S(S(LS(S)LC(C(S(SL))))S(S)LLLLSLLSSSSSSLLL),1*U(U(U(U),U(U),U,U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U(U,U,U,U,U,U),U,U,U)><S,U>,
     Unfolding: (\ (s1 :: Test.QuickCheck.State.State)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Test.QuickCheck.Test.quickCheck2
                   s1
                   Exercises.runSpecs7
                     `cast`
                   (Nth:3
                        (<GHC.Types.Int -> GHC.Types.Bool>_R
                         ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                       (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])))
                   eta) -}
19166d507c87c79e35e127b764805748
  runSpecs7 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Exercises.$wlvl2 ww1 ww2 ww3 ww4 w1 }) -}
ca133e24a07a053aac95aa3728963ff8
  runSpecs8 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*H>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Int) ->
                 case x of wild { GHC.Types.I# x1 -> GHC.Types.True }) -}
f2c7ce09a06231cb2df47fd263307c5a
  testGen :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Exercises.testGen1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
44a1c8f95f1c4d3fb7a05cf7c5bf38ab
  testGen1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Test.QuickCheck.Gen.sample1
                   @ Exercises.Fool
                   Exercises.$fShowFool
                   Exercises.genFool) -}
7a4c701a87c27a345c2519d0f8a21714
  twice :: (b -> b) -> b -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ b (f :: b -> b) -> GHC.Base.. @ b @ b @ b f f) -}
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Exercises.Fool]
  = Exercises.$fArbitraryFool
instance [safe] GHC.Classes.Eq [Exercises.Fool]
  = Exercises.$fEqFool
instance [safe] GHC.Show.Show [Exercises.Fool]
  = Exercises.$fShowFool
"SPEC prop_sortIdempotent @ Int" forall ($dOrd :: GHC.Classes.Ord
                                                    GHC.Types.Int)
  Exercises.prop_sortIdempotent @ GHC.Types.Int $dOrd
  = Exercises.prop_sortIdempotent_$sprop_sortIdempotent
"SPEC/Exercises $fArbitrary[] @ Char" [orphan] forall (v :: Test.QuickCheck.Arbitrary.Arbitrary
                                                              GHC.Types.Char)
  Test.QuickCheck.Arbitrary.$fArbitrary[] @ GHC.Types.Char v
  = Exercises.$s$fArbitrary[]1
"SPEC/Exercises $fArbitrary[] @ Int" [orphan] forall (v :: Test.QuickCheck.Arbitrary.Arbitrary
                                                             GHC.Types.Int)
  Test.QuickCheck.Arbitrary.$fArbitrary[] @ GHC.Types.Int v
  = Exercises.$s$fArbitrary[]
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

